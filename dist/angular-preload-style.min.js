'use strict';

angular.module('angular.preload.style', [])

    .constant('preloadStyleConfiguration', {
        templateUrl: 'loading.html',
        scriptBaseUrl: '',
        cssFile: ''
    })

    .run(['preloadStyleConfiguration', '$templateCache', '$templateRequest',
        function (preloadStyleConfiguration, $templateCache, $templateRequest) {

        $templateRequest(preloadStyleConfiguration.templateUrl).then(function (template) {
            $templateCache.put(preloadStyleConfiguration.templateUrl, template)
        })

    }])

    .directive('angularPreloadStyle', ['preloadStyleConfiguration', function (preloadStyleConfiguration) {
        return {
            templateUrl: preloadStyleConfiguration.templateUrl,
            link: function (scope, element, attrs) {

            }
        };
    }]);
angular.module('angular.preload.style').factory('elementCreator',
    ['$rootScope', '$document', 'preloadStyleConfiguration', '$templateRequest', '$sce', '$compile', '$templateCache',
        function ($rootScope, $document, preloadStyleConfiguration, $templateRequest, $sce, $compile, $templateCache) {

            //http://stackoverflow.com/questions/24496201/load-html-template-from-file-into-a-variable-in-angularjs
            //http://stackoverflow.com/questions/26109658/can-i-use-compile-in-an-angular-service-directly-on-a-templateurl-instead-of-on
            //http://stackoverflow.com/questions/30967382/angular-js-load-a-template-html-from-directive-on-click-of-a-button

            var createOverlayDiv = function () {
                var div = document.createElement('div'),
                    templateUrl = $sce.getTrustedResourceUrl(preloadStyleConfiguration.templateUrl);

                /*$templateRequest(templateUrl).then(function (template) {
                 $compile(angular.element(div).html(template).contents())($rootScope.$new());
                 });*/

                var template = $templateCache.get(templateUrl);
                $compile(angular.element(div).html(template).contents())($rootScope.$new());
            };


            return {
                createOverlayDiv: createOverlayDiv
            };
        }]);
angular.module("templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("loading.html","<div class=\"angular-preload-style\">\n\n    <div class=\"full-overlay\">\n        Carregando...\n    </div>\n\n</div>");}]);
angular.module("angular.preload.style").factory("injectCSS", ['$q', function ($q) {
    var injectCSS = {};

    var createLink = function (id, url) {
        var link = document.createElement('link');
        link.id = id;
        link.rel = "stylesheet";
        link.type = "text/css";
        link.href = url;
        return link;
    };

    var checkLoaded = function (url, deferred, tries) {
        for (var script in document.styleSheets) {
            var href = document.styleSheets[script].href || '';
            if (href.split("/").slice(-1).join() === url) {
                deferred.resolve();
                return;
            }
        }
        tries++;
        setTimeout(function () {
            checkLoaded(url, deferred, tries);
        }, 50);
    };

    injectCSS.set = function (id, url) {
        var tries = 0,
            deferred = $q.defer(),
            link;

        /*if (!angular.element('link#' + id).length) {
         link = createLink(id, url);
         link.onload = deferred.resolve;
         angular.element('head').append(link);
         }*/

        link = createLink(id, url);
        link.onload = deferred.resolve;
        angular.element('head').append(link);

        checkLoaded(url, deferred, tries);

        return deferred.promise;
    };

    return injectCSS;
}]);